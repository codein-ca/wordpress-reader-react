{"version":3,"sources":["components/Post/Post.module.scss","components/Loader/Loader.module.scss","libs/GetPosts.js","components/Post/Post.tsx","libs/GetCategories.js","libs/GetTags.js","components/Loader/Loader.tsx","components/Posts.tsx","App.js","serviceWorker.js","index.tsx"],"names":["module","exports","GetPosts","fetch","then","intialResponse","a","json","transformedResponse","map","entry","catch","e","console","error","Post","props","useState","expandPost","setExpandPost","showContent","setShowContent","post","in","className","styles","NewRoot","Root","key","id","PostTitleContainer","title","onClick","rendered","PostFooter","ButtonContainer","role","aria-label","Content","dangerouslySetInnerHTML","__html","content","GetCategories","GetTags","Loader","ldsHourglass","Posts","categories","setCategories","tags","setTags","x","App","posts","setPosts","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fd396e39.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewRoot\":\"Post_NewRoot__2yEyv\",\"Root\":\"Post_Root__11Wzi\",\"PostTitleContainer\":\"Post_PostTitleContainer__1aDwB\",\"LinkWrapper\":\"Post_LinkWrapper__1JnOM\",\"PostTitle\":\"Post_PostTitle__JJeEM\",\"PostID\":\"Post_PostID___SF-s\",\"PostFooter\":\"Post_PostFooter__1pJwn\",\"Content\":\"Post_Content__1M4qk\",\"ButtonContainer\":\"Post_ButtonContainer__2QvXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds-hourglass\":\"Loader_lds-hourglass__2ysjR\"};","const API_URL = \"http://localhost:8000/wp-json/wp/v2/posts\";\r\n\r\nconst GetPosts = fetch(API_URL)\r\n  .then(async intialResponse => {\r\n    const transformedResponse = await intialResponse.json();\r\n    return transformedResponse.map(entry => {\r\n      // console.info(entry);\r\n      return entry;\r\n    });\r\n  })\r\n  .catch(e => console.error(e));\r\n\r\nexport default GetPosts;\r\n","import React, { useState } from 'react';\r\nimport styles from './Post.module.scss';\r\n\r\nconst Post = (props: any) => {\r\n    const [expandPost, setExpandPost] = useState(false);\r\n    const [showContent, setShowContent] = useState(false);\r\n    \r\n    // TODO: Emit an event to the parent to notify a post was selected\r\n    const post = props.in;\r\n\r\n    if (!post) {\r\n        return <h1>Post not loaded</h1>;\r\n    } else {\r\n        return (\r\n            <article className={styles.NewRoot}>\r\n                <main className={styles.Root} key={post.id}>\r\n                    <h2\r\n                        className={styles.PostTitleContainer}\r\n                        title={'Post ID = ' + post.id}\r\n                        onClick={() => setExpandPost(!expandPost)}\r\n                    >\r\n                        {/* <a href={post.link} className={styles.LinkWrapper}> */}\r\n                        {post.title.rendered}\r\n                        {/* </a> */}\r\n                    </h2>\r\n                    {expandPost && (\r\n                        <aside className={styles.PostFooter}>\r\n                            {expandPost && (\r\n                                <div className={styles.ButtonContainer}>\r\n                                    {/* TODO: Service Worker and Local Storage */}\r\n                                    <button id=\"save\">\r\n                                        <span role=\"img\" aria-label=\"Icon\">\r\n                                            ‚è∞\r\n                                        </span>{' '}\r\n                                        Save offline\r\n                                    </button>\r\n                                    {/* TODO: post.excerpt.rendered */}\r\n                                    <button\r\n                                        id=\"expand\"\r\n                                        onClick={() => setShowContent(!showContent)}\r\n                                    >\r\n                                        <span role=\"img\" aria-label=\"Icon\">\r\n                                            üé∂\r\n                                        </span>\r\n                                        Read now\r\n                                    </button>\r\n                                    {/* TODO: Local state and Class manipulation */}\r\n                                    <button id=\"hide\">\r\n                                        <span role=\"img\" aria-label=\"Icon\">\r\n                                            ‚úã\r\n                                        </span>\r\n                                        Delete\r\n                                    </button>\r\n                                </div>\r\n                            )}\r\n                        </aside>\r\n                    )}\r\n                </main>\r\n                {showContent && (\r\n                    <aside\r\n                        className={styles.Content}\r\n                        dangerouslySetInnerHTML={{\r\n                            __html: post.content.rendered,\r\n                        }}\r\n                    ></aside>\r\n                )}\r\n            </article>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Post;\r\n","const API_URL = \"http://localhost:8000/wp-json/wp/v2/categories\";\r\n\r\nconst GetCategories = fetch(API_URL)\r\n  .then(async intialResponse => {\r\n    const transformedResponse = await intialResponse.json();\r\n    return transformedResponse.map(entry => {\r\n      // console.info(entry);\r\n      return entry;\r\n    });\r\n  })\r\n  .catch(e => console.error(e));\r\n\r\nexport default GetCategories;\r\n","const API_URL = \"http://localhost:8000/wp-json/wp/v2/tags\";\r\n\r\nconst GetTags = fetch(API_URL)\r\n  .then(async intialResponse => {\r\n    const transformedResponse = await intialResponse.json();\r\n    return transformedResponse.map(entry => {\r\n      // console.info(entry);\r\n      return entry;\r\n    });\r\n  })\r\n  .catch(e => console.error(e));\r\n\r\nexport default GetTags;\r\n","import React from \"react\";\r\nimport styles from \"./Loader.module.scss\";\r\nconst Loader = () => <div className={styles.ldsHourglass}></div>;\r\nexport default Loader;\r\n","import React, { useState } from 'react';\r\nimport Post from './Post/Post';\r\nimport GetCategories from '../libs/GetCategories';\r\nimport GetTags from '../libs/GetTags';\r\nimport Loader from './Loader/Loader';\r\n\r\nconst Posts = (props: any) => {\r\n    const [categories, setCategories] = useState();\r\n    const [tags, setTags] = useState();\r\n\r\n    // TODO: Capture an event from the child to be aware that a post was selected\r\n    GetTags.then(x => setTags(x));\r\n    GetCategories.then(x => setCategories(x));\r\n\r\n    if (!props.in) {\r\n        return <Loader />;\r\n    } else {\r\n        return props.in.map((e: any) => (\r\n            <Post in={e} tags={tags} categories={categories} key={e.id} />\r\n        ));\r\n    }\r\n};\r\n\r\nexport default Posts;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.scss\";\r\nimport GetPosts from \"./libs/GetPosts\";\r\nimport Posts from \"./components/Posts\";\r\n\r\nfunction App() {\r\n  // Hooks - Local State\r\n  const [posts, setPosts] = useState();\r\n  // Getting data\r\n  GetPosts.then(x => setPosts(x));\r\n  // JSX template\r\n  return (\r\n    <div className=\"App\">\r\n      <Posts in={posts} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}